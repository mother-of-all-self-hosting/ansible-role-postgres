---
- name: Generate Postgres database vacuum command
  ansible.builtin.set_fact:
    postgres_vacuum_run_command: >-
      {{ devture_systemd_docker_base_host_command_docker }} run
      --rm
      --name={{ postgres_identifier }}-vacuum
      --user={{ postgres_uid }}:{{ postgres_gid }}
      --cap-drop=ALL
      --network={{ postgres_container_network_for_vacuuming }}
      --env-file={{ postgres_base_path }}/env-postgres-psql
      {{ postgres_detected_version_corresponding_docker_image }}
      psql -v ON_ERROR_STOP=1 -h {{ postgres_identifier }} {{ postgres_database_to_vacuum }} -c '{{ postgres_vacuum_query }}'

- name: Note about Postgres vacuum alternative
  ansible.builtin.debug:
    msg: >-
      Running vacuum against the `{{ postgres_database_to_vacuum }}` database with the following Postgres command:
      `{{ postgres_vacuum_run_command }}`.
      If this crashes, you can stop all processes which may use the database (`systemctl stop example.service another.service`),
      start Postgres only (`systemctl start {{ postgres_identifier }}`)
      and manually run the above command directly on the server.

- name: Run Postgres vacuum command
  ansible.builtin.command:
    cmd: "{{ postgres_vacuum_run_command }}"
  async: "{{ postgres_vacuum_wait_time }}"
  poll: 10
  register: postgres_vacuum_result
  failed_when: not postgres_vacuum_result.finished or postgres_vacuum_result.rc != 0
  changed_when: postgres_vacuum_result.finished and postgres_vacuum_result.rc == 0

# Intentionally show the results
- ansible.builtin.debug:
    var: "postgres_vacuum_result"
