---
# Project source code URL: https://github.com/postgres/postgres

postgres_enabled: true

# postgres_identifier controls the identifier of this Postgres instance, which influences:
# - the default storage path
# - the names of systemd services
# - the names of various helper scripts
# - the names of temporary files
postgres_identifier: 'postgres'

postgres_base_path: "/{{ postgres_identifier }}"
postgres_data_path: "{{ postgres_base_path }}/data"
postgres_bin_path: "{{ postgres_base_path }}/bin"

postgres_uid: ''
postgres_gid: ''

postgres_connection_hostname: "{{ postgres_identifier }}"
postgres_connection_port: 5432
postgres_connection_username: "root"
postgres_connection_password: ""
postgres_db_name: "main"

postgres_default_lc_collate: C
postgres_default_lc_type: C
postgres_default_encoding: UTF8

# pgtune.leopard.in.ua implementation in ansible, based on https://github.com/le0pard/pgtune/blob/master/src/features/configuration/configurationSlice.js
# The following block calculates optimal defaults, based on server's CPU and RAM, all calculations are in kb
postgres_memtotal_kb: "{{ ansible_memtotal_mb*1024|int }}"
postgres_data_storage: ssd # possible values: ssd, hdd
postgres_max_connections: 200
postgres_shared_buffers: "{{ postgres_memtotal_kb|int/4 }}"
postgres_effective_cache_size: "{{ (postgres_memtotal_kb|int*3)/4 }}"
postgres_maintenance_work_mem: "{{ 2097152 if (postgres_memtotal_kb|int/16)/1024 >= 2048 else postgres_memtotal_kb|int/16 }}"
postgres_checkpoint_completion_target: 0.9
postgres_wal_buffers: "{{ 16384 if ((postgres_shared_buffers|int*3)/100)/1024 >= 16 else postgres_shared_buffers|int }}" # 16mb
postgres_min_wal_size: 1048576 # 1gb
postgres_max_wal_size: 4194304 # 4gb
postgres_default_statistics_target: 100
postgres_random_page_cost: "{{ 1.1 if postgres_data_storage == 'ssd' else 4 }}"
postgres_effective_io_concurrency: "{{ 200 if postgres_data_storage == 'ssd' else 2 }}"
postgres_max_worker_processes: "{{ ansible_processor_nproc }}"
postgres_max_parallel_workers: "{{ ansible_processor_nproc }}"
postgres_max_parallel_workers_per_gather: "{{ (4 if ansible_processor_nproc/2 > 4 else ansible_processor_nproc|int/2) | round(0, 'ceil') | int }}"
postgres_max_parallel_maintenance_workers: "{{ (4 if ansible_processor_nproc/2 > 4 else ansible_processor_nproc|int/2) | round(0, 'ceil') | int }}"
postgres_work_mem_raw: "{{ ((postgres_memtotal_kb|int - postgres_shared_buffers|int)/(postgres_max_connections|int*3))/postgres_max_parallel_workers_per_gather|int }}"
postgres_work_mem: "{{ 64 if postgres_work_mem_raw|int <= 64 else postgres_work_mem_raw|int }}"
postgres_huge_pages: "{{ 'off' if postgres_memtotal_kb|int/1024/1024 < 32 else 'try' }}"

# postgres_initdb_args controls POSTGRES_INITDB_ARGS
postgres_initdb_args: '--lc-collate {{ postgres_default_lc_collate }} --lc-ctype {{ postgres_default_lc_type }} --encoding {{ postgres_default_encoding }}'

# postgres_systemd_services_to_stop_for_maintenance_list specifies the list of systemd services to stop before upgrading or vacuuming (for certain vacuum operations).
# These services will be restarted after the operation completes.
postgres_systemd_services_to_stop_for_maintenance_list: "{{ postgres_systemd_services_to_stop_for_maintenance_list_auto + postgres_systemd_services_to_stop_for_maintenance_list_custom }}"
# postgres_systemd_services_to_stop_for_maintenance_list_auto is for use by the playbook that wraps this role.
# For your own custom definitions, see postgres_systemd_services_to_stop_for_maintenance_list_custom.
postgres_systemd_services_to_stop_for_maintenance_list_auto: []
postgres_systemd_services_to_stop_for_maintenance_list_custom: []

# Controls whether this role will stop the Postgres systemd service it had started after having prepared it.
#
# As part of the installation process, this role may bring up the Postgres service
# and run some queries against it to prepare the additional databases, etc.
# If the service was originally stopped before these preparations and we started it just to prepare it,
# this setting would control whether we'd restore it to a stopped state.
#
# If Postgres was already running, it wouldn't be stopped after preparation regardless of the value of this variable.
#
# This setting only affects Postgres stopping as part of the preparation process.
# Other parts of this role (importing, vacuuming, etc.) may also start an originally stopped Postgres to do their work.
# These other parts will continue stopping such an originally-stopped Postgres regardless of this setting.
#
# We default this to false (don't stop), because it provides for a smoother installation experience with less stopping/starting.
# Before this setting got introduced, we used to stop the service (if it's us that started it),
# but this is now seen as wasteful work, which could delay the installation process.
postgres_systemd_service_stop_originally_stopped_after_preparation: false

# postgres_vacuum_presets contains various presets related to vacuuming (`--tags=run-postgres-vacuum`).
# See: https://www.postgresql.org/docs/current/sql-vacuum.html
#
# `stopServices` specifies whether services (see `postgres_systemd_services_to_stop_for_maintenance_list`)
# need to be stopped before a vacuuming query runs.
postgres_vacuum_presets:
  vacuum-complete:
    query: "VACUUM FULL VERBOSE ANALYZE"
    stopsServices: true
  vacuum-full:
    query: "VACUUM FULL VERBOSE"
    stopsServices: true
  vacuum:
    query: "VACUUM VERBOSE"
    stopsServices: false
  vacuum-analyze:
    query: "VACUUM VERBOSE ANALYZE"
    stopsServices: false
  analyze:
    query: "ANALYZE VERBOSE"
    stopsServices: false

# postgres_vacuum_default_databases_list specifies a list of databases to vacuum when running `--tags=run-postgres-vacuum`,
# unless a `postgres_vacuum_databases_list` extra argument is provided
postgres_vacuum_default_databases_list: |
  {{
    (
        ([postgres_db_name])
        +
        (postgres_managed_databases | map(attribute='name'))
    ) | unique
  }}

postgres_architecture: amd64

postgres_container_network: "{{ postgres_identifier }}"

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
postgres_container_additional_networks: "{{ postgres_container_additional_networks_auto + postgres_container_additional_networks_custom }}"
postgres_container_additional_networks_auto: []
postgres_container_additional_networks_custom: []

postgres_container_image_registry_prefix: "{{ postgres_container_image_registry_prefix_upstream }}"
postgres_container_image_registry_prefix_upstream: "{{ postgres_container_image_registry_prefix_upstream_default }}"
postgres_container_image_registry_prefix_upstream_default: "docker.io/"

# postgres_container_image_suffix controls whether we use Alpine-based images (`-alpine`) or the normal Debian-based images.
# Alpine-based Postgres images are smaller and we usually prefer them, but they don't work on ARM32 (tested on a Raspberry Pi 3 running Raspbian 10.7).
# On ARM32, `-alpine` images fail with the following error:
# > LOG:  startup process (PID 37) was terminated by signal 11: Segmentation fault
postgres_container_image_suffix: "{{ '-alpine' if postgres_architecture in ['amd64', 'arm64'] else '' }}"

postgres_container_image_v9: "{{ postgres_container_image_registry_prefix }}postgres:9.6.24{{ postgres_container_image_suffix }}"
postgres_container_image_v10: "{{ postgres_container_image_registry_prefix }}postgres:10.23{{ postgres_container_image_suffix }}"
postgres_container_image_v11: "{{ postgres_container_image_registry_prefix }}postgres:11.22{{ postgres_container_image_suffix }}"
postgres_container_image_v12: "{{ postgres_container_image_registry_prefix }}postgres:12.22{{ postgres_container_image_suffix }}"
postgres_container_image_v13: "{{ postgres_container_image_registry_prefix }}postgres:13.21{{ postgres_container_image_suffix }}"
postgres_container_image_v14: "{{ postgres_container_image_registry_prefix }}postgres:14.18{{ postgres_container_image_suffix }}"
postgres_container_image_v15: "{{ postgres_container_image_registry_prefix }}postgres:15.13{{ postgres_container_image_suffix }}"
postgres_container_image_v16: "{{ postgres_container_image_registry_prefix }}postgres:16.9{{ postgres_container_image_suffix }}"
postgres_container_image_v17: "{{ postgres_container_image_registry_prefix }}postgres:17.5{{ postgres_container_image_suffix }}"
postgres_container_image_latest: "{{ postgres_container_image_v17 }}"

# This variable is assigned at runtime. Overriding its value has no effect.
postgres_container_image_to_use: '{{ postgres_container_image_latest }}'

postgres_container_image_force_pull: "{{ postgres_container_image_to_use.endswith(':latest') }}"

# Controls how long to wait for the container to stop gracefully before killing it.
# Because `devture_systemd_docker_base_container_stop_grace_time_seconds` may be quite short and databases are more important to stop gracefully,
# we default to at least 30 seconds.
postgres_container_stop_grace_time_seconds: "{{ [devture_systemd_docker_base_container_stop_grace_time_seconds, 30] | max }}"

# A list of extra arguments to pass to the container
postgres_container_extra_arguments: []

# postgres_postgres_process_extra_arguments_auto is for use by the playbook that wraps this role.
# For your own custom definitions, see postgres_postgres_process_extra_arguments_custom.
postgres_postgres_process_extra_arguments_auto: [
  "-c 'max_connections={{ postgres_max_connections|int }}'",
  "-c 'shared_buffers={{ (postgres_shared_buffers|int/1024)|int }}MB'",
  "-c 'effective_cache_size={{ (postgres_effective_cache_size|int/1024)|int }}MB'",
  "-c 'maintenance_work_mem={{ (postgres_maintenance_work_mem|int/1024)|int }}MB'",
  "-c 'checkpoint_completion_target={{ postgres_checkpoint_completion_target }}'",
  "-c 'wal_buffers={{ (postgres_wal_buffers|int/1024)|int }}MB'",
  "-c 'default_statistics_target={{ postgres_default_statistics_target|int }}'",
  "-c 'random_page_cost={{ postgres_random_page_cost }}'",
  "-c 'effective_io_concurrency={{ postgres_effective_io_concurrency|int }}'",
  "-c 'work_mem={{ postgres_work_mem|int }}kB'",
  "-c 'huge_pages={{ postgres_huge_pages }}'",
  "-c 'min_wal_size={{ (postgres_min_wal_size|int/1024)|int }}MB'",
  "-c 'max_wal_size={{ (postgres_max_wal_size|int/1024)|int }}MB'",
  "-c 'max_worker_processes={{ postgres_max_worker_processes|int }}'",
  "-c 'max_parallel_workers={{ postgres_max_parallel_workers|int }}'",
  "-c 'max_parallel_workers_per_gather={{ postgres_max_parallel_workers_per_gather|int }}'",
  "-c 'max_parallel_maintenance_workers={{ postgres_max_parallel_maintenance_workers|int }}'"
]
postgres_postgres_process_extra_arguments_custom: []

# A list of extra arguments to pass to the postgres process
# e.g. "-c 'max_connections=200'"
postgres_process_extra_arguments: "{{ postgres_postgres_process_extra_arguments_auto + postgres_postgres_process_extra_arguments_custom }}"

# Controls whether the Postgres container exposes a port (tcp/5432 in the
# container) that can be used to access the database from outside the container (e.g. with psql)
#
# psql postgresql://username:password@localhost:<port>/database_name
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:5432"), or empty string to not expose.
postgres_container_postgres_bind_port: ""

postgres_container_shm_size: "256m"

postgres_systemd_required_services_list: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"

# A list of databases (and their credentials) that this role will create and manage on the server.
#
# `postgres_managed_databases_auto` is managed by the playbook.
# Your own definitions should go into `postgres_managed_databases_additional`
# See `postgres_managed_databases_additional` for the correct syntax.
postgres_managed_databases: "{{ postgres_managed_databases_auto + postgres_managed_databases_additional }}"

# Additional/managed database definitions managed by the playbook.
# To add your own, use `postgres_managed_databases_additional`
postgres_managed_databases_auto: []

# Your own additional/managed database definitions.
#
# postgres_managed_databases_additional:
#   - name: some_database
#     username: some_username
#     password: some_password
#   - name: another_database
#     username: another_username
#     password: another_password
postgres_managed_databases_additional: []

# A list of roles/users to avoid creating when importing (or upgrading) the database.
# If a dump file contains the roles and they've also been created beforehand (see `postgres_managed_databases`),
# importing would fail.
# We either need to not create them or to ignore the `CREATE ROLE` statements in the dump.
postgres_import_roles_to_ignore: |
  {{
    (
      [postgres_connection_username]
      +
      postgres_managed_databases | map(attribute='username') | list
    ) | unique
  }}

# When importing an existing Postgres database (when restoring a backup) or when doing a Postgres upgrade (which dumps & restores), we'd like to avoid:
# - creating users (`CREATE ROLE ..`)
# - updating passwords for users (`ALTER ROLE root WITH SUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS PASSWORD 'md5...`)
#
# Both of these operations are done by the playbook anyway.
# Updating passwords is especially undesirable, because older versions hash passwords using md5 and export them as md5 hashes in the dump file,
# which is unsupported by default by newer Postgres versions (v14+).
# When users are created and passwords are set by the playbook, they end up hashed as `scram-sha-256` on Postgres v14+.
# If an md5-hashed password is restored on top, Postgres v14+ will refuse to authenticate users with it by default.
#
# We also allow for the role name to be quoted, which is rare, but might happen for role names which are special keywords (e.g. `default`).
postgres_import_roles_ignore_regex: "^(CREATE|ALTER) ROLE \\\"?({{ postgres_import_roles_to_ignore | join('|') }})\\\"?(;| WITH)"  # noqa jinja[spacing]

# A list of databases to avoid creating when importing (or upgrading) the database.
# If a dump file contains the databases and they've also been created beforehand (see `postgres_managed_databases`),
# importing would fail.
# We either need to not create them or to ignore the `CREATE DATABASE` statements in the dump.
postgres_import_databases_to_ignore: |
  {{
    (
      [postgres_db_name]
      +
      postgres_managed_databases | map(attribute='name') | list
    ) | unique
  }}

# We also allow for the database name to be quoted, which is rare, but might happen for database names which are special keywords (e.g. `default`).
postgres_import_databases_ignore_regex: "^CREATE DATABASE \\\"?({{ postgres_import_databases_to_ignore | join('|') }})\\\"?\\s" # noqa jinja[spacing]

# The number of seconds to wait after starting Postgres systemd service
# and before trying to run queries for initializing managed databases/users against it.
#
# For most (subsequent) runs, Postgres would already be running, so no waiting will be happening at all.
#
# On ARM, we wait some more. ARM32 devices are especially known for being slow.
# ARM64 likely don't need such a long delay, but it doesn't hurt too much having it.
postgres_managed_databases_postgres_start_wait_timeout_seconds: "{{ 45 if postgres_architecture in ['arm32', 'arm64'] else 15 }}"

postgres_pgloader_container_image_self_build: "{{ postgres_architecture != 'amd64' }}"
postgres_pgloader_container_image_self_build_repo: "https://github.com/illagrenan/pgloader-docker.git"
postgres_pgloader_container_image_self_build_repo_branch: "v{{ postgres_pgloader_container_image_tag }}"
postgres_pgloader_container_image_self_build_src_path: "{{ postgres_base_path }}/pgloader-container-src"

# We use illagrenan/pgloader, instead of the more official dimitri/pgloader image,
# because the official one only provides a `latest` tag.
postgres_pgloader_docker_image: "{{ postgres_pgloader_container_image_registry_prefix }}illagrenan/pgloader:{{ postgres_pgloader_container_image_tag }}"
postgres_pgloader_container_image_registry_prefix: "{{ 'localhost/' if postgres_pgloader_container_image_self_build else postgres_pgloader_container_image_registry_prefix_upstream }}"
postgres_pgloader_container_image_registry_prefix_upstream: "{{ postgres_pgloader_container_image_registry_prefix_upstream_default }}"
postgres_pgloader_container_image_registry_prefix_upstream_default: "docker.io/"
postgres_pgloader_container_image_tag: "3.6.2"
postgres_pgloader_container_image_force_pull: "{{ postgres_pgloader_docker_image.endswith(':latest') }}"
